// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// fast_sum_integer
std::vector<int> fast_sum_integer(List xx);
RcppExport SEXP plyrmr_fast_sum_integer(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type xx(xxSEXP );
        std::vector<int> __result = fast_sum_integer(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// fast_sum_numeric
std::vector<double> fast_sum_numeric(List xx);
RcppExport SEXP plyrmr_fast_sum_numeric(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type xx(xxSEXP );
        std::vector<double> __result = fast_sum_numeric(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// fast_mean_integer
std::vector<int> fast_mean_integer(List xx);
RcppExport SEXP plyrmr_fast_mean_integer(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type xx(xxSEXP );
        std::vector<int> __result = fast_mean_integer(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// fast_mean_numeric
std::vector<double> fast_mean_numeric(List xx);
RcppExport SEXP plyrmr_fast_mean_numeric(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type xx(xxSEXP );
        std::vector<double> __result = fast_mean_numeric(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// fast_first_integer
std::vector<int> fast_first_integer(List xx);
RcppExport SEXP plyrmr_fast_first_integer(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type xx(xxSEXP );
        std::vector<int> __result = fast_first_integer(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// fast_first_numeric
std::vector<double> fast_first_numeric(List xx);
RcppExport SEXP plyrmr_fast_first_numeric(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type xx(xxSEXP );
        std::vector<double> __result = fast_first_numeric(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// fast_first_character
std::vector<std::string> fast_first_character(List xx);
RcppExport SEXP plyrmr_fast_first_character(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type xx(xxSEXP );
        std::vector<std::string> __result = fast_first_character(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// fast_first_factor
std::vector<int> fast_first_factor(List xx);
RcppExport SEXP plyrmr_fast_first_factor(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type xx(xxSEXP );
        std::vector<int> __result = fast_first_factor(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// fast_first_logical
std::vector<bool> fast_first_logical(List xx);
RcppExport SEXP plyrmr_fast_first_logical(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type xx(xxSEXP );
        std::vector<bool> __result = fast_first_logical(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
